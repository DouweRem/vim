global !p
texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
texIgnoreMathZones = ['texMathTextArg']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

#def math():
#	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
#	try:
#		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
#		return first != ignore
#	except StopIteration:
#		return False
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'


# def siunitx():
#	return 

#def create_int_placeholders(snip):
#    start = snip.snippet_start[1]
#    end = snip.snippet_end[1]
#    try:
#        preface = int(snip.buffer[snip.line][end])
#        placeholders_amount = preface
    #    anon_snippet_body = "\\"+str(snip.buffer[snip.line][start+1:end])+"_{$1}^{"+"$2} $3"
#        anon_snippet_body = "_{$1}^{"+"$2} $3"
#    except:
#        placeholders_amount = str(snip.buffer[snip.line][start:end]).count("i")
#        anon_snippet_body = "_{$1}^{"+"$2} $3"
    #    anon_snippet_body = "\\"+str(snip.buffer[snip.line][start:end])+"_{$1}^{"+"$2} $3"
#    curs_end = start+ len(anon_snippet_body) -11
#    anon_snippet_end = snip.buffer[snip.line][end:]
    # erase current line
    # snip.buffer[snip.line] = snip.buffer[snip.line][:start]

#    placeholder = 4
    # create anonymous snippet with expected content and number of tabstops
#    for i in range(placeholders_amount):
#        anon_snippet_body += "\,d"+ f"${placeholder} "
#        placeholder += 1

#    anon_snippet_body += anon_snippet_end + f"${placeholder}"

    # expand anonymous snippet
#    snip.expand_anon(anon_snippet_body)
#    snip.cursor.set(snip.line, curs_end)

def create_int(string):
    counts = {}
    string = string.replace('_', '')
    try:
        counts['x'] = int(string)
    except(ValueError):  
        infs = string.split('d')
        if infs[0] == '':
            infs = infs[1:]
        if infs[-1] == '':
            infs = infs[:-1]
        for char in infs:
            if char[:-1].isdigit():
                add = int(char[:-1])
                inf = char[-1]
            else:
                add = 1
                inf = char
            if inf in counts:
                counts[inf] += add
            else:
                counts[inf] = add
    inf_string = ''
    for inf, order in counts.items():
        if len(inf) == 1 and order == 1:
            inf_string += '\\text{d}' + inf +'\,'
        elif len(inf) == 1:
            inf_string += '\\text{d}^{' + str(order) + '}' + inf + '\,'
        elif len(inf) > 1 and order == 1:
            inf_string += '\\text{d}^{' + inf[:-1] + '}' + inf[-1] + '\,'
        else:
            inf_string += '\\text{d}^{' + str(order) + inf[:-1] + '}' + inf[-1] + '\,'
    inf_string = inf_string[:-2]
    return inf_string   

def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	res += "\t\end{tabular}\n\t\caption{"+f"${placeholder }"+"}\n\t\label{tab:"+f"${placeholder + 1}"+"}"
	return res


def create_math_matrix(cols, rows, sep, start, end, kind):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"\t${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	res += start+"\end{"+kind+"}"
	return res

def create_array(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	res += "\t\end{array}"
	return res

def char_plus(char, counts, amount):
    if char in counts:
        counts[char] += amount
    else:
        counts[char] = amount


def find_order(string):
    counts = index_infinitesimals(string)
    all_values = [*counts.values()]
    if len(all_values) == 1:
        if all_values[0] == 1:
            return ''
        else:
            return '^{' + str(all_values[0]) + '}'
    order_string = str(all_values[0])
    for value in all_values[1:]:
        if isinstance(value, int) and order_string.isdigit():
            order_string = str(int(order_string) + value)
        elif order_string.isdigit() and not isinstance(value, int):
            order_string = value + ' + ' + str(order_string)
        else:
            sub_strings = order_string.split(' + ')
            if sub_strings[-1].isdigit():
                order_string = ''
                for sub_string in sub_strings[:-1]:
                    order_string += sub_string + ' + '
                if isinstance(value, int):
                    new_sub_string = str(int(sub_strings[-1]) + value)
                    order_string += new_sub_string
                else:
                    order_string += value + ' + ' + sub_strings[-1]
            else:
                order_string += ' + ' + str(value)
    return '^{' + order_string + '}'


def index_infinitesimals(string):
    counts = {}
    if string[0] == '_':
        string = string[1:]
    string = string.replace('d_', 'd')
    try:
        counts['x'] = int(string)
    except ValueError:
        infs = string.split('d')
        if infs[0] == '':
            infs = infs[1:]
        if infs[-1] == '':
            infs = infs[:-1]
        for inf in infs:
            if inf[0] == '{':
                skip = inf.find('}')
                counts[inf[skip+1:]] = inf[1:skip]
            elif inf[0].isdigit():
                char_plus(inf[1:], counts, int(inf[0]))
            else:
                char_plus(inf, counts, 1)
    return counts


def create_infinitesimals(string, prefactor):
    counts = index_infinitesimals(string)
    denom = ''
    for inf, order in counts.items():
        if order == 1:
            denom += prefactor + ' ' + inf + '\,'
        else:
            denom += prefactor + ' ' + inf + '^{' + str(order) + '}' + '\,'
    return denom[:-2]

endglobal

snippet template "basis template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[english]{babel}
\usepackage{amsmath, amssymb}
\usepackage{siunitx}
\usepackage{gensymb}
\usepackage{graphicx}

\setlength\parindent{0pt}
%Oplossen van badness hbox enzo
\hbadness=99999 
\hfuzz=9999pt
\addtolength{\hoffset}{-2.25cm}
\addtolength{\textwidth}{4.5cm}
\addtolength{\voffset}{-3.25cm}
\addtolength{\textheight}{5cm}
\setlength{\parskip}{0pt}
\setlength{\parindent}{0in}
\sisetup{exponent-product = \cdot}


\title{$1}
\author{Douwe Remmelts\\\\(s2586592)}
\date{\today}

\begin{document}
\maketitle
$0
\end{document}
endsnippet

snippet asttemp "Astronomy units" b
\DeclareSIUnit \parsec {pc}
\DeclareSIUnit \Msun {M\ensuremath{_\odot}}
\DeclareSIUnit \Rsun {R\ensuremath{_\odot}
\DeclareSIUnit \Lsun {L\ensuremath{_\odot}
endsnippet

snippet vctemp "Vector template" b
\renewcommand{\vec}{\boldsymbol}
\newcommand{\evc}[1]{\widehat{\vec{#1}}}
endsnippet

snippet nabtemp "Nabla template" b
\newcommand{\rot}{\text{rot}\,}
\renewcommand{\div}{\text{div}\,}
\renewcommand{\grad}{\text{grad}\,}
endsnippet

snippet qedtemp "QED template" b
\newcommand{\qed}{\hfill\ensuremath{\Box}}
endsnippet

snippet tenstemp "Tensor template" b
\newcommand{\tens}[1]{\overset{\text{\tiny$\leftrightarrow$}}{\boldsymbol{#1}}}
endsnippet

snippet beg "Begin" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet bd "Bold" A
\textbf{$1}$0
endsnippet

snippet ttt "ttt text" A
\texttt{$1}$0
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet fig "Figure"
\begin{figure}[h]
	\centering
	\includegraphics[scale=${2:0.4}]{$1}
	\caption{$3}
	\label{fig:$4}
\end{figure}$0
endsnippet



snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':', ')']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "math()"
snippet '(\b|^|\\)(?!approx|sim|geq|leq|equiv)([A-Za-z]+)(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1) + match.group(2) + "_" + match.group(3)`
endsnippet

context "math()"
snippet '([A-Za-z])_((?:\d|[a-zA-Z])(?:,?)(?:\d|[A-Za-z]))' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])_([a-zA-z]+)_(\d|[A-Za-z])' "auto subscript3" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) + '_' + match.group(3)`}
endsnippet

priority 10
context "math()"
snippet '(\d)e(\d)' "non-subscript siunitx" wrA
`!p snip.rv = match.group(1) + "e" + match.group(2)`
endsnippet

priority 10
snippet md "Outline Math" i
\[$1\]$0
endsnippet

priority 100
snippet md "Outline Math" bA
\[$1\]$0
endsnippet

snippet mt "Math met nummer" bA
\begin{equation} \label{eq:$1}
	$2
\end{equation}$0
endsnippet

priority 10
context "math()"
snippet vc "Vector" Ai
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)evc' "Eenheids Vector" rAi
\evc{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)tens' "Tens" rAi
\tens{$1}$0
endsnippet

context "math()"
snippet // "Breuk" Ai
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '([^$\[\(\)\s]+)\/(\S+)(\s)' "Automatische breuk" rA
\frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
endsnippet

context "math()"
snippet '\((.+)\)/\((.+)\)' "Automatische breuk versie 2" rA 
\frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet txt "Text" iA
\text{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)sqrt' "Wortel" riA
\sqrt{$1}$0
endsnippet

context "math()"
snippet mtc "Mathcal" i
\mathcal{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)hat' "Hat" rAi
\hat{$1}$0
endsnippet

context "math()"
snippet what "Wide hat" iA
\widehat{$1}$0
endsnippet

context "math()"
snippet wchk "Wide check" iA
\widecheck{$1}$0
endsnippet

snippet widecheck "Command for wide check"
\usepackage{verbatim}

%% code from mathabx.sty and mathabx.dcl
\DeclareFontFamily{U}{mathx}{\hyphenchar\font45}
\DeclareFontShape{U}{mathx}{m}{n}{
      <5> <6> <7> <8> <9> <10>
      <10.95> <12> <14.4> <17.28> <20.74> <24.88>
      mathx10
      }{}
\DeclareSymbolFont{mathx}{U}{mathx}{m}{n}
\DeclareFontSubstitution{U}{mathx}{m}{n}
\DeclareMathAccent{\widecheck}{0}{mathx}{"71}
\DeclareMathAccent{\wideparen}{0}{mathx}{"75}

\def\cs#1{\texttt{\char`\\#1}}
endsnippet

priority 100
context "math()" 
snippet `pder([^\n$]+)` "Partial derivative" rw
\frac{\partial`!p snip.rv = find_order(match.group(1))` $1}{`!p snip.rv = create_infinitesimals(match.group(1), '\partial')`}$0
endsnippet

priority 100
context "math()" 
snippet `cder([^\n$]+)` "Covariant derivative" rw
\frac{\text{D}`!p snip.rv = find_order(match.group(1))` $1}{`!p snip.rv = create_infinitesimals(match.group(1), '\partial')`}$0
endsnippet

priority 10
context "math()" 
snippet `der([^\n$]+)` "Derivative" rw
\frac{\text{d}`!p snip.rv = find_order(match.group(1))` $1}{`!p snip.rv = create_infinitesimals(match.group(1), '\\text{d}')`}$0
endsnippet

context "math()" 
snippet '(?<!\\)exp' "e macht" rAi
e^{$1}$0
endsnippet

context "math()"
snippet '(?<!\\)log' "logaritme" rAi
\log_{$2}\left($1\right)$0
endsnippet

priority 10
context "math()"
snippet '(?<!\\)(tan|sin|cos|ln)' "ln" rwA
\\`!p snip.rv = match.group(1)`\left($1\right)$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(arctan|arcsin|arccos)' "ln" rwA
\\`!p snip.rv = match.group(1)`\left($1\right)$0
endsnippet

context "math()"
snippet '(?<!\\)(alpha|beta|gamma|Gamma|delta|Delta|pi|phi|Phi|Psi|theta|omega|Omega|lambda|Lambda|epsilon|mu|nu|rho|tau|sigma|xi|hbar|langle|rangle|nabla|chi)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet dau "Dau" Ai
\partial
endsnippet

context "math()"
snippet JJ "Functie ding" Ai
\mathcal{J}
endsnippet

context "math()"
snippet CC "Complexe getallen" Ai
\mathbb{C}
endsnippet

context "math()"
snippet RR "Reeele getallen" Ai
\mathbb{R}
endsnippet

context "math()"
snippet ZZ "gehele getallen" Ai
\mathbb{Z}
endsnippet

context "math()"
snippet FF "Fourier trans" Ai
\mathfrak{F}
endsnippet

context "math()"
snippet '(?<!\\)sum' "Sommatie" rAi
\sum_{${1:i}}^{$2} $0
endsnippet

priority 100
context "math()"
snippet '(?<!\\|o|i)(int|iint|oint|iiint|oiint)' "Integraal" rw
`!p snip.rv = '\\' + match.group(1)`_{$1}^{$2} $3 \\text{d}x $0
endsnippet

priority 10
context "math()"
snippet '(?<!\\|o|i)(int|iint|oint|iiint|oiint)([^\n$]+)' "ints" rw
`!p snip.rv = '\\' + match.group(1)`_{$1}^{$2} $3 `!p snip.rv = create_infinitesimals(match.group(2), '\\text{d}')` $0
endsnippet

context "math()"
snippet '(?<!\\)lim' "Limiet" rAi
\lim_{${1:x}\to ${2:0}} $0
endsnippet

context "math()"
snippet '(?<!\\)inf' "Oneindig" rAi
\infty
endsnippet

# context "math()"
# snippet Rsun "Zonnestraal" Ai
# R_\odot
# endsnippet

# context "math()"
# snippet Msun "Zonnen massa" Ai
# M_\odot
# endsnippet

# context "math()"
# snippet Lsun "Zonnen luminosity" Ai
# L_\odot
# endsnippet
# vim:ft=snippets

context "math()"
snippet '(?<!\\)pmat' "P matrix" ri
\begin{pmatrix}
	$1
\end{pmatrix}$0
endsnippet

context "math()"
snippet gmat "Gauss matrix" i
\begin{gmatrix}[$1]
	$2
	\rowops
	$3
\end{gmatrix}$0
endsnippet

context "math()"
snippet algn "Align" i
\begin{aligned} $1 \end{aligned}$0
endsnippet

context "math()"
snippet pv "Gekoppelde vergelijking" i
\left\\\{\begin{aligned}
	$1
\end{aligned}\right.$0
endsnippet

context "math()"
snippet inpr "Inproduct" iA
\left\langle $1,$2\right\rangle$0
endsnippet

priority 10
context "math"
snippet '(?<!\\)bra' "bra" ri
\bra*{$1}$0
endsnippet

priority 10
context "math"
snippet '(?<!\\)ket' "ket" ri
\ket*{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)braket' "braket" rAi
\braket*{$1}{$2}$0
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'tab(\d+),(\d+)' "LaTeX table" br
\begin{table}[h]
	\centering
	\begin{tabular}{`!p
orient = ""
for _ in range(0, int(match.group(1))-1): orient += "c|"
orient += "c"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
	`$0
\end{table}
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet '([ \t]*)(?<!\\)(\\\[|)(?<!\\)(pmat|vmat)_(\d+),(\d+)' "P matrix" r
`!p snip.rv = match.group(1) + match.group(2)`\begin{`!p snip.rv = match.group(3)`rix}
`!p
snip.rv = create_math_matrix(match.group(4), match.group(5), "&", match.group(1), "\\\\\\\\\n", match.group(3)+'rix')
	`$0
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet 'arr_(\d+),(\d+)' "array" r
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))-1): orient += "c|"
orient += "c"
snip.rv = orient`}
`!p
snip.rv = create_array(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
	`$0
endsnippet

snippet '(?<!\\)(qty|SI)' "siunitx" rw
\\`!p snip.rv = match.group(1)`{$1}{$2}$0
endsnippet

snippet '(\\qty|\\SI){([^\n\}$]+)}{([^\n\}$]*)(?<!\\)(nano|micro|milli|centi|kilo|mega|giga|watt|joule|second|gram|metre|radian|steradian|kelvin|hertz|parsec|erg|Msun|Rsun|Lsun|per|squared|cubed)' "units in siunitx" rwA
`!p snip.rv = match.group(1) + "{" + match.group(2) + "}{" + match.group(3) + "\\" + match.group(4)`$0
endsnippet

snippet '(\\qty|\\SI){([^\n\}$]+)}{([^\n\}$]*)meter' "meter in siunitx" rwA
`!p snip.rv = match.group(1) + "{" + match.group(2) + "}{" + match.group(3) + "\\metre"`$0
endsnippet


